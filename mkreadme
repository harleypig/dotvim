#!/bin/bash

# shellcheck disable=SC2034

# XXX: DELETE ME
#SHOW_CATEGORIES=0

# get .gitmodule entries
# parse for path and url
# get module name from last part of url
# create markdown text link: [text](url)
# put in proper bucket
# dump buckets in md format

#=============================================================================
# Setup

source envsubstitute

declare -A submodule vars check_dirs
declare bucket url url_text RENAME categories

declare NL=$'\n'
declare readme_tmpl
readme_tmpl="$(< README.md.template)"

# For envsubstitute, don't warn or replace non-existent variables.
# Defaults to true
declare NO_WARN="${NO_WARN:-1}"

# Various environment variables that change output
# Defaults to true
declare SHOW_CATEGORIES="${SHOW_CATEGORIES:-1}"

# Skip checking these directories if they exist
declare -a skip_existing_dirs

skip_existing_dirs+=('mystuff')
skip_existing_dirs+=('statusline')
skip_existing_dirs+=('matchit')

#=============================================================================
# Functions

#-----------------------------------------------------------------------------
get_bucket() {
  local bucket="${1:-must pass value to get_bucket}"

  if [[ $bucket =~ ^.vim/2btested/ ]]; then
    bucket='tobetested'

  elif [[ $bucket =~ ^.vim/bundle/ ]]; then
    bucket='tobemoved'

  elif [[ $bucket =~ ^.vim/pack ]]; then
    # path = .vim/pack/active/start/vim-surround
    bucket="${bucket#.vim/pack/}"
    bucket="${bucket%%/*}"

  else
    bucket='unexpected'
  fi

  printf '%s' "$bucket"
}

#-----------------------------------------------------------------------------
get_name() {
  local name="${1:-must pass something to get a name from}"
  [[ $name == */ ]] && name="${name::-1}"
  name="${name##*/}"
  name="${name%\.git}"
  name="${name%\.vim}"
  printf '%s' "$name"
}

#-----------------------------------------------------------------------------
get_existing_dirs() {
  local -a dirs fopts

  # skip these dirs if they exist
  local skip_rx
  printf -v skip_rx '%s|' "${skip_existing_dirs[@]}"
  skip_rx="${skip_rx%?}"

  # find opts
  fopts+=('-maxdepth' '0')
  fopts+=('-type' 'd')

  readarray -t dirs < <(find .vim/pack/*/*/* .vim/{2btested,bundle}/* "${fopts[@]}")

  for d in "${dirs[@]}"; do
    [[ $d =~ $skip_rx$ ]] && continue
    check_dirs["$d"]='find'
  done
}

#-----------------------------------------------------------------------------
get_existing_submodules() {
  get_existing_dirs

  local -a lines
  local key mod keyname bucket url_text url

  local entry_tmpl='%bucket%|* [%url_text%](%url%)%renameflag%'

  readarray -t lines < <(git config -f .gitmodules --get-regexp '.*')

  #---------------------------------------------------------------------------
  for line in "${lines[@]}"; do
    read -r key value <<< "$line"

    key="${key#submodule.}"
    mod="${key%.*}"
    keyname="${key##*.}"

    case "$keyname" in
      path)
        bucket="$(get_bucket "$value")"

        if [[ -v check_dirs[$value] ]]; then
          unset "check_dirs[$value]"

        else
          check_dirs[$value]='submodule'
        fi
        ;;

      url)
        url_text="$(get_name "$value")"
        url="$value"
        renameflag=
        [[ $mod != "$url_text" ]] && renameflag=' (rename)'
        ;;

      *) continue ;;
    esac

    tmpl="$entry_tmpl"
    [[ -v ${submodule[$mod]} ]] && tmpl="${submodule[$mod]}"

    tmpl="$(_envsubst "$tmpl")"
    submodule[$mod]="$tmpl"
  done

  #---------------------------------------------------------------------------
  for mod in "${!submodule[@]}"; do
    IFS='|' read -r var text <<< "${submodule[$mod]}"
    vars["$var"]+="$NL$text"
  done

  #---------------------------------------------------------------------------
  for mod in "${!vars[@]}"; do
    eval "$mod='$(echo "${vars[$mod]}" | sort -u)'"
    ((SHOW_CATEGORIES)) && categories+="$NL* $mod"
  done

  ((SHOW_CATEGORIES)) && categories="$(echo "$categories" | sort -u)"

  #---------------------------------------------------------------------------
  if [[ ${#check_dirs[@]} -gt 0 ]]; then
    unexpected+="$NL!!! Fix these:$NL"

    for u in "${!check_dirs[@]}"; do
      unexpected+="$NL* $u: ${check_dirs[$u]}"
    done
  fi
}

#=============================================================================
get_existing_submodules

[[ -z $unexpected ]] && unexpected="$NL"

_envsubst "$readme_tmpl"
